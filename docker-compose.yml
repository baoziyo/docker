version: '3'

networks:
  backend:
    driver: bridge

services:
  mysql:
    container_name: mysql
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - backend

  nginx:
    container_name: nginx
    build:
      context: ./nginx
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    depends_on:
      - base-php
    networks:
      - backend

  base-php:
    container_name: base-php
    build:
      context: ./php-fpm
      args:
        - LARADOCK_PHP_VERSION=${PHP_VERSION}
        - BASE_IMAGE_TAG_PREFIX=${PHP_FPM_BASE_IMAGE_TAG_PREFIX}
        - ADDITIONAL_LOCALES="en_US.UTF-8 es_ES.UTF-8 fr_FR.UTF-8"
        - INSTALL_BZ2=true
        - INSTALL_XSL=true
        - INSTALL_PHPREDIS=true
        - INSTALL_SWOOLE=true
        - INSTALL_PCNTL=true
        - INSTALL_BCMATH=true
        - INSTALL_MYSQLI=true
        - INSTALL_IMAGE_OPTIMIZERS=true
        - INSTALL_YAML=true
    volumes:
      - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    ports:
      - "${PHP_PORT}:3306"
    environment:
      - FAKETIME=-0
    networks:
      - backend

  redis:
    container_name: redis
    build: ./redis
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend

  rabbitmq:
    container_name: rabbitmq
    build: ./rabbitmq
    ports:
      - "${RABBITMQ_NODE_HOST_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
      - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
    privileged: true
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - ${DATA_PATH_HOST}/rabbitmq:/var/lib/rabbitmq
    networks:
      - backend

  gitlab:
    container_name: gitlab
    build:
      context: ./gitlab
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url '${GITLAB_DOMAIN_NAME}'
        redis['enable'] = false
        nginx['listen_https'] = false
        nginx['listen_port'] = 80
        nginx['custom_gitlab_server_config'] = "set_real_ip_from 172.0.0.0/8;\nreal_ip_header X-Real-IP;\nreal_ip_recursive on;"
        postgresql['enable'] = false
        gitlab_rails['trusted_proxies'] = ['caddy','nginx','apache2']
        gitlab_rails['redis_host'] = 'redis'
        gitlab_rails['redis_database'] = 8
        gitlab_rails['db_host'] = '${GITLAB_POSTGRES_HOST}'
        gitlab_rails['db_username'] = '${GITLAB_POSTGRES_USER}'
        gitlab_rails['db_password'] = '${GITLAB_POSTGRES_PASSWORD}'
        gitlab_rails['db_database'] = '${GITLAB_POSTGRES_DB}'
        gitlab_rails['initial_root_password'] = '${GITLAB_ROOT_PASSWORD}'
        gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_HOST_SSH_PORT}
    volumes:
      - ${DATA_PATH_HOST}/gitlab/config:/etc/gitlab
      - ${DATA_PATH_HOST}/gitlab/data:/var/opt/gitlab
      - ${GITLAB_HOST_LOG_PATH}:/var/log/gitlab
    ports:
      - "${GITLAB_HOST_HTTP_PORT}:80"
      - "${GITLAB_HOST_HTTPS_PORT}:443"
      - "${GITLAB_HOST_SSH_PORT}:22"
    networks:
      - backend
    depends_on:
      - redis
      - postgres

  gitlab-runner-1:
    container_name: gitlab-runner-1
    image: gitlab/gitlab-runner:latest
    environment:
      - CI_SERVER_URL=${GITLAB_CI_SERVER_URL}
      - REGISTRATION_TOKEN=${GITLAB_RUNNER_REGISTRATION_TOKEN}
      - REGISTER_NON_INTERACTIVE=${GITLAB_REGISTER_NON_INTERACTIVE}
      - RUNNER_EXECUTOR=shell
    volumes:
      - ${DATA_PATH_HOST}/gitlab/runner:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock:rw
    networks:
      - backend

  gitlab-runner-2:
    container_name: gitlab-runner-2
    image: gitlab/gitlab-runner:latest
    environment:
      - CI_SERVER_URL=${GITLAB_CI_SERVER_URL}
      - REGISTRATION_TOKEN=${GITLAB_RUNNER_REGISTRATION_TOKEN}
      - REGISTER_NON_INTERACTIVE=${GITLAB_REGISTER_NON_INTERACTIVE}
      - RUNNER_EXECUTOR=shell
    volumes:
      - ${DATA_PATH_HOST}/gitlab/runner:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock:rw
    networks:
      - backend

  gitlab-runner-3:
    container_name: gitlab-runner-3
    image: gitlab/gitlab-runner:latest
    environment:
      - CI_SERVER_URL=${GITLAB_CI_SERVER_URL}
      - REGISTRATION_TOKEN=${GITLAB_RUNNER_REGISTRATION_TOKEN}
      - REGISTER_NON_INTERACTIVE=${GITLAB_REGISTER_NON_INTERACTIVE}
      - RUNNER_EXECUTOR=shell
    volumes:
      - ${DATA_PATH_HOST}/gitlab/runner:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock:rw
    networks:
      - backend

  postgres:
    container_name: postgres
    build:
      context: ./postgres
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
      - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

      - GITLAB_POSTGRES_INIT=${GITLAB_POSTGRES_INIT}
      - GITLAB_POSTGRES_USER=${GITLAB_POSTGRES_USER}
      - GITLAB_POSTGRES_PASSWORD=${GITLAB_POSTGRES_PASSWORD}
      - GITLAB_POSTGRES_DB=${GITLAB_POSTGRES_DB}

      - SONARQUBE_POSTGRES_INIT=${SONARQUBE_POSTGRES_INIT}
      - SONARQUBE_POSTGRES_DB=${SONARQUBE_POSTGRES_DB}
      - SONARQUBE_POSTGRES_USER=${SONARQUBE_POSTGRES_USER}
      - SONARQUBE_POSTGRES_PASSWORD=${SONARQUBE_POSTGRES_PASSWORD}

      - WIKI_POSTGRES_INIT=${WIKI_POSTGRES_INIT}
      - WIKI_POSTGRES_USER=${WIKI_POSTGRES_USER}
      - WIKI_POSTGRES_PASSWORD=${WIKI_POSTGRES_PASSWORD}
      - WIKI_POSTGRES_DB=${WIKI_POSTGRES_DB}
    networks:
      - backend

  sonarqube:
    container_name: sonarqube
    build:
      context: ./sonarqube
    hostname: "${SONARQUBE_HOSTNAME}"
    volumes:
      - ${DATA_PATH_HOST}/sonarqube/conf:/opt/sonarqube/conf
      - ${DATA_PATH_HOST}/sonarqube/data:/opt/sonarqube/data
      - ${DATA_PATH_HOST}/sonarqube/logs:/opt/sonarqube/logs
      - ${DATA_PATH_HOST}/sonarqube/extensions:/opt/sonarqube/extensions
      - ${DATA_PATH_HOST}/sonarqube/plugins:/opt/sonarqube/lib/bundled-plugins
    ports:
      - ${SONARQUBE_PORT}:9000
    depends_on:
      - postgres
    environment:
      - sonar.jdbc.username=${SONARQUBE_POSTGRES_USER}
      - sonar.jdbc.password=${SONARQUBE_POSTGRES_PASSWORD}
      - sonar.jdbc.url=jdbc:postgresql://${SONARQUBE_POSTGRES_HOST}:5432/${SONARQUBE_POSTGRES_DB}
    networks:
      - backend

  mongo:
    container_name: mongo
    build: ./mongo
    ports:
      - "${MONGODB_PORT}:27017"
    volumes:
      - ${DATA_PATH_HOST}/mongo:/data/db
      - ${DATA_PATH_HOST}/mongo_config:/data/configdb
    networks:
      - backend

  wiki:
    container_name: wiki
    build: ./wiki
    ports:
      - "${WIKI_PORT}:8090"
    environment:
      DB_TYPE: postgres
      DB_HOST: ${WIKI_DB_HOST}
      DB_PORT: ${WIKI_DB_PORT}
      DB_USER: ${WIKI_POSTGRES_USER}
      DB_PASS: ${WIKI_POSTGRES_PASSWORD}
      DB_NAME: ${WIKI_POSTGRES_DB}
    networks:
      - backend
    volumes:
      - ./wiki/pj:/pj

  certbot:
    image: certbot/certbot:latest
    restart: unless-stopped
    volumes:
      - "./certbot/etc/letsencrypt:/etc/letsencrypt"
      - "./certbot/var/lib/letsencrypt:/var/lib/letsencrypt"
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
